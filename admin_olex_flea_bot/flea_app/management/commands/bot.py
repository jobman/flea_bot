from django.core.management.base import BaseCommand
from django.conf import settings
from django.utils import timezone
from telegram import Bot
from telegram import Update
from telegram.ext import CallbackContext
from telegram.utils.request import Request
from flea_app.models import Profile, Post
from telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove)
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters,
                          ConversationHandler)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
import logging
import datetime

chanel = settings.CHANEL_TEST

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

TYPE, PHOTO, PRICE, DESCRIPTION = range(4)


def update_or_create_user(f):
    def wrapper(update: Update, context: CallbackContext, **kwargs):
        p, created = Profile.objects.get_or_create(
            external_id=update.message.chat_id,
            defaults={
                'username': update.message.from_user.username,
            }
        )
        return f(update, context, profile=p, created=created)

    return wrapper


@update_or_create_user
def post_disable_list(update, context, **kwargs):
    profile = kwargs['profile']
    posts = Post.objects.filter(profile=profile)
    keyboard = []
    prefix = "BUTTON_CANCEL_"
    for post in posts:
        if post.status == Post.Status.APPROVED:
            keyboard.append(
                [InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å: " + post.text[:20] + '..', callback_data=prefix + str(post.pk))])

    if not len(keyboard):
        context.bot.sendMessage(chat_id=profile.external_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")
    else:
        markup = InlineKeyboardMarkup(keyboard)
        context.bot.sendMessage(chat_id=profile.external_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s: –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", profile.username)



def post_disable(context, post):
    post.status = Post.Status.SOLD
    post.save()
    new_text = text_from_post(post)
    if post.image_file_id:
        context.bot.editMessageCaption(chat_id=chanel, message_id=int(post.external_id), caption=new_text)
    else:
        context.bot.editMessageText(chat_id=chanel, message_id=int(post.external_id), text=new_text)


def text_from_post(post):
    separator = '\n_______________________________\n'
    text = post.type_p + separator
    if post.status != Post.Status.SOLD:
        text += 'üçè #–ê–∫—Ç–∏–≤–Ω–æ' + separator
    else:
        text += 'üçé #–ü—Ä–æ–¥–∞–Ω–æ' + separator
    text += post.text + separator
    if post.price:
        text += '–¶–µ–Ω–∞: ' + post.price + separator
    text += '–ü–∏—Å–∞—Ç—å: @' + post.profile.username
    return text


# –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
BUTTON_APPROVE = "BUTTON_APPROVE"
BUTTON_COMMERCIAL = "BUTTON_COMMERCIAL"
BUTTON_COMMERCIAL_NO_TRANSACTION = "BUTTON_COMMERCIAL_NO_TRANSACTION"
BUTTON_DECLINE = "BUTTON_DECLINE"
# –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
BUTTON_PAYED = "BUTTON_PAYED"

KEYBOARD_TITLES = {
    BUTTON_APPROVE: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
    BUTTON_COMMERCIAL: "–ö–æ–º–µ—Ä—á–µ—Å–∫–æ–µ",
    BUTTON_DECLINE: "–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
    BUTTON_PAYED: "–û–ø–ª–∞—á–µ–Ω–æ",
}


def get_admin_keyboard():
    keyboard = [
        [InlineKeyboardButton(KEYBOARD_TITLES[BUTTON_APPROVE], callback_data=BUTTON_APPROVE), ],
        [InlineKeyboardButton(KEYBOARD_TITLES[BUTTON_COMMERCIAL], callback_data=BUTTON_COMMERCIAL), ],
        [InlineKeyboardButton(KEYBOARD_TITLES[BUTTON_DECLINE], callback_data=BUTTON_DECLINE), ],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_commercial_keyboard():
    keyboard = [
        [InlineKeyboardButton(KEYBOARD_TITLES[BUTTON_PAYED], callback_data=BUTTON_PAYED), ],
    ]
    return InlineKeyboardMarkup(keyboard)


def approve_post(context, post):
    if post.status != Post.Status.APPROVED:
        post.reviewed_at = timezone.now()
        post.status = Post.Status.APPROVED
        post.save()

        text = text_from_post(post)
        if post.image_file_id:
            message = context.bot.sendPhoto(chat_id=chanel, photo=post.image_file_id,
                                            caption=text)
        else:
            message = context.bot.sendMessage(chat_id=chanel, text=text)
        post.external_id = message.message_id
        post.save()
        context.bot.sendMessage(chat_id=post.profile.external_id,
                                text="–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω\n –°–ø–∞—Å–∏–±–æ üôè —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Å–µ—Ä–≤–∏—Å–æ–º")
        context.bot.forwardMessage(chat_id=post.profile.external_id, from_chat_id=chanel,
                                   message_id=post.external_id)


def commercial_post(context, post):
    post.status = Post.Status.WAIT_MONEY
    post.reviewed_at = timezone.now()
    post.save()

    post_id = str(post.pk)
    text = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—à –ø–æ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π
–ó–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—å—è–≤–ª–µ–Ω–∏—è –≤–∑—ã–º–∞–µ—Ç—Å—è –ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ
100 –≥—Ä–Ω
–ü–æ–∂–∞–ª–∞—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—á–µ–Ω–æ", –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

–†–µ–∫–≤–∏–∑–∏—Ç—ã:
4149 4991 4336 5912
    
–ü–æ—Å–ª–µ, –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ
    """
    text = text + '\nID: ' + post_id
    context.bot.sendMessage(chat_id=post.profile.external_id, text=text, reply_markup=get_commercial_keyboard())


def decline_post(context, post):
    if post.status == Post.Status.ON_REVIEW or post.status == Post.Status.WAIT_MONEY:
        reason = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –≤–∞—à –ø–æ—Å—Ç –∫–∞–∫ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π\n'
        reason += '–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â–µ üçÄ'
        post.status = Post.Status.DECLINE
        post.reviewed_at = timezone.now()
        post.save()
        context.bot.sendMessage(chat_id=post.profile.external_id, text=reason)


def edit_post_for_admin(update, decision):
    query = update.callback_query
    current_text = update.effective_message.text
    current_caption = update.effective_message.caption

    if current_text:
        text = current_text
        with_image = False
    if current_caption:
        text = current_caption
        with_image = True

    split = text.split('\n')
    _id = int(split[0])
    post = Post.objects.get(pk=_id)
    text = text + '\n' + decision
    if not with_image:
        query.edit_message_text(
            text=text
        )
    else:
        query.edit_message_caption(
            caption=text
        )
    return post


def get_admin_keyboard_after_payed():
    keyboard = [
        [InlineKeyboardButton(KEYBOARD_TITLES[BUTTON_APPROVE], callback_data=BUTTON_APPROVE), ],
        [InlineKeyboardButton(KEYBOARD_TITLES[BUTTON_DECLINE], callback_data=BUTTON_DECLINE), ],
    ]
    return InlineKeyboardMarkup(keyboard)


def send_post_to_admins_after_payed(update, context):
    current_text = update.effective_message.text
    current_caption = update.effective_message.caption

    if current_text:
        text = current_text
    if current_caption:
        text = current_caption

    split = text.split('\n')
    _id = int(split[-1][4:])
    post = Post.objects.get(pk=_id)
    notify_admins(post, context, get_admin_keyboard_after_payed())
    return post


def keyboard_handler(update, context):
    query = update.callback_query
    data = query.data
    chat_id = update.effective_message.chat_id
    profile = Profile.objects.get(external_id=chat_id)

    if profile.is_admin:
        if data == BUTTON_APPROVE:
            post = edit_post_for_admin(update, '–û–î–û–ë–†–ï–ù–û')
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @%s: –æ–¥–æ–±—Ä–∏–ª –ø–æ—Å—Ç: %s", profile.username, str(post.pk))
            if post.status == Post.Status.ON_REVIEW:
                approve_post(context, post)
        elif data == BUTTON_COMMERCIAL:
            post = edit_post_for_admin(update, '–û–¢–ü–†–ê–í–õ–ï–ù –ó–ê–ü–†–û–° –û–ü–õ–ê–¢–´')
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @%s: –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–ª–∞—Ç—É –Ω–∞ –ø–æ—Å—Ç: %s", profile.username, str(post.pk))
            if post.status == Post.Status.ON_REVIEW:
                commercial_post(context, post)
        elif data == BUTTON_DECLINE:
            post = edit_post_for_admin(update, '–û–¢–ö–õ–û–ù–ï–ù–û')
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @%s: –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ—Å—Ç: %s", profile.username, str(post.pk))
            if post.status == Post.Status.ON_REVIEW:
                decline_post(context, post)
    if data == BUTTON_PAYED:
        context.bot.sendMessage(chat_id=chat_id, text="–°–ø–∞—Å–∏–±–æ, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ\n–ß—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
                                disable_notification=True)
        post = send_post_to_admins_after_payed(update, context)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s: —Å–æ–æ–±—â–∞–µ—Ç —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –ø–æ—Å—Ç: %s", profile.username, str(post.pk))
    if data[:len('BUTTON_CANCEL_')] == 'BUTTON_CANCEL_':
        id_ = int(data[len('BUTTON_CANCEL_'):])
        post = Post.objects.get(pk=id_)
        post_disable(context, post)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ—Å—Ç: %s", profile.username, str(post.pk))

        context.bot.sendMessage(chat_id=chat_id, text="–í–∞—à –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")


def notify_admins(post, context, keyboard=get_admin_keyboard()):
    admins = Profile.objects.filter(is_admin=True)
    text = text_from_post(post)
    text = str(post.pk) + '\n' + text
    for admin in admins:
        if post.image_file_id:
            context.bot.sendPhoto(chat_id=admin.external_id, photo=post.image_file_id,
                                  caption=text, reply_markup=keyboard)
        else:   
            context.bot.sendMessage(chat_id=admin.external_id, text=text, reply_markup=keyboard)
        logger.info("–û–ø–æ–≤–µ—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @%s: –æ –ø–æ—Å—Ç–µ: %s", admin.username, str(post.pk))


@update_or_create_user
def post_create(update, context, **kwargs):
    reply_keyboard = [['–ö—É–ø–∏—Ç—å üõí', '–ü—Ä–æ–¥–∞—Ç—å üí∞', '–î—Ä—É–≥–æ–µ üé±']]
    profile = kwargs['profile']

    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç "–ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–∫–∏" –û–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç.\n'
        '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ—Ç –≤ —Ç—Ä–∏ —ç—Ç–∞–ø–∞\n'
        '1) –§–æ—Ç–æ\n'
        '2) –¶–µ–Ω–∞\n'
        '3) –û–ø–∏—Å–∞–Ω–∏–µ\n'
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel —á—Ç–æ –±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.\n\n'
        '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç: ',

        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))

    return TYPE


@update_or_create_user
def post_type(update, context, **kwargs):
    user = update.message.from_user
    profile = kwargs['profile']
    type_ = update.message.text[:-2]
    if type_ == '–ö—É–ø–∏—Ç—å':
        type_ = '#–ö—É–ø–ª—é'
    elif type_ == '–ü—Ä–æ–¥–∞—Ç—å':
        type_ = '#–ü—Ä–æ–¥–∞–º'
    else:
        type_ = '#–î—Ä—É–≥–æ–µ'
    post = Post(
        profile=profile,
        type_p=type_,
        status=Post.Status.ON_CREATE
    )
    post.save()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s: –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç —Å —Ç–∏–ø–æ–º: %s", user.username, update.message.text)
    update.message.reply_text('–•–æ—Ä–æ—à–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞\n'
                              '–∏–ª–∏ /skip –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ',
                              reply_markup=ReplyKeyboardRemove())

    return PHOTO


@update_or_create_user
def photo(update, context, **kwargs):
    user = update.message.from_user
    profile = kwargs['profile']
    post = Post.objects.filter(status=Post.Status.ON_CREATE, profile=profile).order_by('created_at')[0]
    photo_file = update.message.photo[-1].get_file()
    post.image_file_id = photo_file.file_id
    post.save()
    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç @%s: post id #%i", user.username, post.pk)
    update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É, '
                              '–∏–ª–∏ /skip –µ—Å–ª–∏ –≤ —Ü–µ–Ω–µ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏')

    return PRICE


@update_or_create_user
def skip_photo(update, context, **kwargs):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ", user.username)
    update.message.reply_text('–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –±–µ–∑ —Ñ–æ—Ç–æ.\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É, '
                              '–∏–ª–∏ /skip —á—Ç–æ –±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø.')

    return PRICE


@update_or_create_user
def price(update, context, **kwargs):
    user = update.message.from_user
    profile = kwargs['profile']

    if update.message.text == '/cancel':
        return cancel(update, context, **kwargs)
    else:
        post = Post.objects.filter(status=Post.Status.ON_CREATE, profile=profile).order_by('created_at')[0]
        post.price = update.message.text
        post.save()
    logger.info("–£–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ %s –æ—Ç –ø–æ–ª—å–∑–æ–≤—Ç–∞–µ–ª—è @%s", update.message.text, user.username)
    update.message.reply_text('–¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n'
                              '–¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

    return DESCRIPTION


@update_or_create_user
def skip_price(update, context, **kwargs):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Ü–µ–Ω—É.", user.username)
    update.message.reply_text('–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã. '
                              '–¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

    return DESCRIPTION


@update_or_create_user
def description(update, context, **kwargs):
    user = update.message.from_user
    profile = kwargs['profile']
    post = Post.objects.filter(status=Post.Status.ON_CREATE, profile=profile).order_by('created_at')[0]
    post.text = update.message.text
    post.status = Post.Status.ON_REVIEW
    post.save()
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s: %s", user.username, update.message.text)
    update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –ü–æ—Å–ª–µ —ç—Ç–∞–ø–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ')
    notify_admins(post, context)
    return ConversationHandler.END


@update_or_create_user
def cancel(update, context, **kwargs):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.", user.username)
    profile = kwargs['profile']
    try:
        post = Post.objects.filter(status=Post.Status.ON_CREATE, profile=profile).order_by('created_at')[0]
        post.delete()
    except IndexError:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s, –æ–±—ä–µ–∫—Ç –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω", user.username)
    update.message.reply_text('–ü–æ–∫–∞! –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
                              reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


def log_errors(f):
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            raise e

    return inner


@log_errors
def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    p, created = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'username': update.message.from_user.username,
        }
    )

    reply_text = "–í–∞—à ID {}\n\n{}".format(chat_id, text)
    update.message.reply_text(
        text=reply_text
    )


@update_or_create_user
def do_start(update: Update, context: CallbackContext, **kwargs):
    profile = kwargs['profile']
    reply_keyboard = [['–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', '–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç']]
    update.message.reply_text(
        text=f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–∞—Ä–∞—Ö–æ–ª–∫–∞ –ë–û–¢\n",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True),
    )


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç'

    def handle(self, *args, **options):
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
            con_pool_size=8,
        )
        bot = Bot(
            request=request,
            token=settings.TOKEN
        )
        print(bot.get_me())

        updater = Updater(
            bot=bot,
            use_context=True
        )

        conversation_create_post_handler = ConversationHandler(
            entry_points=[MessageHandler(Filters.regex('^(–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç)$'), post_create)],

            states={
                TYPE: [MessageHandler(Filters.regex('^(–ö—É–ø–∏—Ç—å üõí|–ü—Ä–æ–¥–∞—Ç—å üí∞|–î—Ä—É–≥–æ–µ üé±)$'), post_type)],

                PHOTO: [MessageHandler(Filters.photo, photo),
                        CommandHandler('skip', skip_photo)],

                PRICE: [CommandHandler('skip', skip_price),
                        MessageHandler(Filters.text, price)],

                DESCRIPTION: [MessageHandler(Filters.text & ~Filters.command, description)]
            },

            fallbacks=[CommandHandler('cancel', cancel)]
        )

        start_handler = CommandHandler("start", do_start)
        updater.dispatcher.add_handler(start_handler)

        disable_massage_handler = MessageHandler(Filters.regex('^(–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç)$'), post_disable_list)
        # disable_command_handler = CommandHandler('disable', post_disable)
        admin_buttons_handler = CallbackQueryHandler(keyboard_handler)

        updater.dispatcher.add_handler(admin_buttons_handler)
        updater.dispatcher.add_handler(conversation_create_post_handler)
        updater.dispatcher.add_handler(disable_massage_handler)
        # updater.dispatcher.add_handler(disable_command_handler)
        # message_handler = MessageHandler(Filters.text, do_echo)

        # updater.dispatcher.add_handler(message_handler)

        updater.start_polling()
        updater.idle()
